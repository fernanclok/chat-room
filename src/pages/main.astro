---
import Header from "../components/header.astro";
import Layout from "../layouts/Layout.astro";
import Sidebar from "../components/sidebar.astro";
---

<Layout title="EnteraChat">
  <Sidebar />
  <div class="content-container">
    <Header />

    <div class="chat-container chat-container-with-margin">
      <!-- Aquí se muestran los mensajes del chat -->
      <div id="chat" style="overflow-y: auto; display: flex; flex-direction: column-reverse;"></div>

      <form
        id="messageForm"
        class="flex items-center px-3 py-2 rounded-lg bg-gray-50 dark:bg-gray-700 form-full-width"
      >
        <input
          id="messageInput"
          type="text"
          class="block mx-4 p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="Your message..."
        />

        <button
          type="submit"
          class="inline-flex justify-center p-2 text-blue-600 rounded-lg cursor-pointer hover:bg-blue-100 dark:text-blue-500 dark:hover:bg-gray-600"
        >
          <svg
            class="w-5 h-5 rotate-90"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 18 20"
          >
            <path
              d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z"
            ></path>
          </svg>
          <span class="sr-only">Send message</span>
        </button>
      </form>
    </div>
  </div>

  <script src="https://192.168.35.16:8000/socket.io/socket.io.js" is:inline
  ></script>

  <script>
    const getUserID = async () => {
      // Función para obtener el valor de una cookie por su nombre
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
      }

      // obtener el user_id del usuario actual
      const user_id = parseInt(getCookie("user_id"));

      if (!user_id) {
        console.error("user_id no disponible");
        return null;
      }

      return user_id;
    };

    const getUsername = async () => {
      // Función para obtener el valor de una cookie por su nombre
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
      }

      // obtener el user_id del usuario actual
      const username = getCookie("username");

      if (!username) {
        console.error("username no disponible");
        return null;
      }

      return username;
    };

    // Conectar al servidor de Socket.io
    const socket = io("https://192.168.35.16:8000", {
      auth: {
        user_Id: await getUserID(),
        username: await getUsername(),
        serverOffSet: 0,
      },
    });

    const form = document.getElementById("messageForm");
    const messageInput = document.getElementById("messageInput");
    const messageContainer = document.getElementById("chat");

    socket.on("chat message", (msg, serverOffSet) => {
      console.log("Mensaje recibido en el cliente:", msg);

      // Determinar si el mensaje es del usuario actual
      const isCurrentUserMessage = msg.user_id === socket.auth.user_Id;
      
      // Estilos al mensaje dependiendo de si es del usuario actual o de otro usuario
      const messageClass = isCurrentUserMessage ? "me" : "them";
      const usernameClass = isCurrentUserMessage ? "username-me" : "username-them";

      // Crear un elemento para el nombre de usuario
      const usernameElement = document.createElement("span");
      usernameElement.classList.add(usernameClass);
      usernameElement.textContent = msg.username + ": ";

      // Crear un elemento para el mensaje
      const messageElement = document.createElement("p");
      messageElement.classList.add(messageClass);

      // Crear el contenido del mensaje
      const messageContent = document.createTextNode(msg.message);

      // Agregar el nombre y contenido del mensaje al chat
      messageElement.appendChild(usernameElement);
      messageElement.appendChild(messageContent);

      // Agregar el mensaje al inicio del chat en lugar del final
      messageContainer.insertBefore(messageElement, messageContainer.firstChild);

      socket.auth.serverOffSet = serverOffSet;
      // messageContainer.scrollTop = 0; // Mantener el chat en la parte inferior
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (messageInput.value) {
        const message = messageInput.value;
        const user_id = await getUserID();
        const username = await getUsername();

        // Obtener el user_id y username del usuario actual
        if (!user_id || !username) {
          console.error("user_id o username no disponibles");
          return;
        }

        // Crear un objeto de mensaje con los datos necesarios
        const messageData = {
          user_id,
          username,
          message,
          timestamp: new Date().toISOString(),
        };

        socket.emit("chat message", messageData);

        messageInput.value = "";
      }
    });
  </script>

  <style>
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 69vh;
      margin-left: 0;
      transition: margin-left 0.3s ease;
    }

    .chat-container.chat-container-with-margin {
      margin-left: 250px;
    }

    #chat {
      flex-grow: 1;
      display: flex;
      flex-direction: column-reverse;
      overflow-y: auto;
      height: 85vh;
      scroll-behavior: smooth;
    }

    #messageForm {
      width: auto;
      height: 15vh;
    }

    #chat p {
      width: 70%;
      margin: 10px;
      padding: 5px;
      border-radius: 5px;
    }

    .me {
      margin-left: auto;
      background-color: #4861d1;
      color: #ffffff;
      text-align: right;
    }

    .them {
      margin-right: auto;
      background-color: #67acec;
      color: #ffffff;
      text-align: left;
    }

    .username-me {
      margin-right: auto;
      color: #ffffff;
      font-weight: bold;
    }

    .username-them {
      margin-right: auto;
      color: #ffffff;
      font-weight: bold;
    }
  </style>
</Layout>